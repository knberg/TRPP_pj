@startuml
interface barbershop.service.BasketService {
~ void addBook(Book)
~ List<Book> getBooks()
~ List<Book> getSetOfBook(List<Book>)
~ List<String> getCounts(List<Book>,List<Book>)
~ Integer getPrice(List<Book>)
~ Double getStock(List<Book>)
~ void deleteBook(String)
~ void buy()
~ User getUser()
}
interface barbershop.service.UserService {
~ User getByLogin(String)
~ void createUser(UserRegistrationDto,String)
}
class barbershop.service.impl.UserServiceImpl {
- UserRepository userRepository
- BCryptPasswordEncoder passwordEncoder
+ User getByLogin(String)
+ void createUser(UserRegistrationDto,String)
+ UserDetails loadUserByUsername(String)
- Collection<? extends GrantedAuthority> mapRolesToAuthorities(Collection<Role>)
}
class barbershop.service.impl.BookServiceImpl {
- BookRepository bookRepository
+ List<Book> getAllByCategory(String)
+ Book getByName(List<Book>,String)
}
interface barbershop.service.BookService {
~ List<Book> getAllByCategory(String)
~ Book getByName(List<Book>,String)
}
class barbershop.service.impl.BasketServiceImpl {
- UserRepository userRepository
- BookRepository bookRepository
+ void addBook(Book)
+ List<Book> getBooks()
+ List<Book> getSetOfBook(List<Book>)
+ List<String> getCounts(List<Book>,List<Book>)
+ Integer getPrice(List<Book>)
+ Double getStock(List<Book>)
+ void deleteBook(String)
+ void buy()
+ User getUser()
}


org.springframework.security.core.userdetails.UserDetailsService <|-- barbershop.service.UserService
barbershop.service.UserService <|.. barbershop.service.impl.UserServiceImpl
barbershop.service.BookService <|.. barbershop.service.impl.BookServiceImpl
barbershop.service.BasketService <|.. barbershop.service.impl.BasketServiceImpl
@enduml